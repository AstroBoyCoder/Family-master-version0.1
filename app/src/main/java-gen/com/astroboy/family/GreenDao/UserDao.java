package com.astroboy.family.GreenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.astroboy.family.GreenDao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_ID = new Property(1, int.class, "User_ID", false, "USER__ID");
        public final static Property User_Name = new Property(2, String.class, "User_Name", false, "USER__NAME");
        public final static Property User_Password = new Property(3, String.class, "User_Password", false, "USER__PASSWORD");
        public final static Property User_Address = new Property(4, String.class, "User_Address", false, "USER__ADDRESS");
        public final static Property User_Phone = new Property(5, String.class, "User_Phone", false, "USER__PHONE");
        public final static Property User_Identity = new Property(6, String.class, "User_Identity", false, "USER__IDENTITY");
        public final static Property User_Mail = new Property(7, String.class, "User_Mail", false, "USER__MAIL");
        public final static Property User_Sex = new Property(8, String.class, "User_Sex", false, "USER__SEX");
        public final static Property User_RealName = new Property(9, String.class, "User_RealName", false, "USER__REAL_NAME");
        public final static Property User_Age = new Property(10, String.class, "User_Age", false, "USER__AGE");
        public final static Property User_Hobby = new Property(11, String.class, "User_Hobby", false, "USER__HOBBY");
        public final static Property User_Blood = new Property(12, String.class, "User_Blood", false, "USER__BLOOD");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USER__ID' INTEGER NOT NULL UNIQUE ," + // 1: User_ID
                "'USER__NAME' TEXT NOT NULL ," + // 2: User_Name
                "'USER__PASSWORD' TEXT NOT NULL ," + // 3: User_Password
                "'USER__ADDRESS' TEXT," + // 4: User_Address
                "'USER__PHONE' TEXT NOT NULL ," + // 5: User_Phone
                "'USER__IDENTITY' TEXT," + // 6: User_Identity
                "'USER__MAIL' TEXT," + // 7: User_Mail
                "'USER__SEX' TEXT," + // 8: User_Sex
                "'USER__REAL_NAME' TEXT," + // 9: User_RealName
                "'USER__AGE' TEXT," + // 10: User_Age
                "'USER__HOBBY' TEXT," + // 11: User_Hobby
                "'USER__BLOOD' TEXT);"); // 12: User_Blood
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUser_ID());
        stmt.bindString(3, entity.getUser_Name());
        stmt.bindString(4, entity.getUser_Password());
 
        String User_Address = entity.getUser_Address();
        if (User_Address != null) {
            stmt.bindString(5, User_Address);
        }
        stmt.bindString(6, entity.getUser_Phone());
 
        String User_Identity = entity.getUser_Identity();
        if (User_Identity != null) {
            stmt.bindString(7, User_Identity);
        }
 
        String User_Mail = entity.getUser_Mail();
        if (User_Mail != null) {
            stmt.bindString(8, User_Mail);
        }
 
        String User_Sex = entity.getUser_Sex();
        if (User_Sex != null) {
            stmt.bindString(9, User_Sex);
        }
 
        String User_RealName = entity.getUser_RealName();
        if (User_RealName != null) {
            stmt.bindString(10, User_RealName);
        }
 
        String User_Age = entity.getUser_Age();
        if (User_Age != null) {
            stmt.bindString(11, User_Age);
        }
 
        String User_Hobby = entity.getUser_Hobby();
        if (User_Hobby != null) {
            stmt.bindString(12, User_Hobby);
        }
 
        String User_Blood = entity.getUser_Blood();
        if (User_Blood != null) {
            stmt.bindString(13, User_Blood);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // User_ID
            cursor.getString(offset + 2), // User_Name
            cursor.getString(offset + 3), // User_Password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // User_Address
            cursor.getString(offset + 5), // User_Phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // User_Identity
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // User_Mail
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // User_Sex
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // User_RealName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // User_Age
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // User_Hobby
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // User_Blood
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_ID(cursor.getInt(offset + 1));
        entity.setUser_Name(cursor.getString(offset + 2));
        entity.setUser_Password(cursor.getString(offset + 3));
        entity.setUser_Address(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_Phone(cursor.getString(offset + 5));
        entity.setUser_Identity(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUser_Mail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUser_Sex(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUser_RealName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUser_Age(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUser_Hobby(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUser_Blood(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
